1
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[], char *envp[]) {
    (void) execle("/bin/cat", "cat", "03-2.c", NULL, envp);
    printf("Error on program start\n");
    exit(-1);
}
‚Ä®2‚Ä®#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    char *args[] = {"cat", "03-2.c", NULL};
    execv("/bin/cat", args);
    printf("Error on program start\n");
    exit(-1);
}
‚Ä®3‚Ä®#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[], char *envp[]) {
    pid_t pid = fork();
    if (pid == 0) {
        printf("Child process:\n");
        for (int i = 0; i < argc; i++) printf("argv[%d] = %s\n", i, argv[i]);
        for (int i = 0; envp[i] != NULL; i++) printf("envp[%d] = %s\n", i, envp[i]);
    } else if (pid > 0) {
        wait(NULL);
        printf("Parent process finished\n");
    } else {
        printf("Fork failed\n");
        exit(-1);
    }
    return 0;
}
‚Ä®4‚Ä®#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[], char *envp[]) {
    char *args[] = {"cat", "03-2.c", NULL};
    execve("/bin/cat", args, envp);
    printf("Error on program start\n");
    exit(-1);
}
‚Ä®5‚Ä®#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[], char *envp[]) {
    pid_t pid = fork();
    if (pid == 0) {
        execle("/bin/ls", "ls", "-l", NULL, envp);
        printf("Error starting child process\n");
        exit(-1);
    } else if (pid > 0) {
        printf("Parent process running\n");
        wait(NULL);
        printf("Parent process finished\n");
    } else {
        printf("Fork failed\n");
        exit(-1);
    }
    return 0;
}
‚Ä®‚Ä®–†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ 1 (execle), 2 (execv) —Ç–∞ 4 (execve) –ø–æ–ª—è–≥–∞—î –≤ —Å–ø–æ—Å–æ–±—ñ –ø–µ—Ä–µ–¥–∞—á—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø—Ä–æ—Ü–µ—Å—É:

1Ô∏è‚É£ execle(path, arg0, arg1, ‚Ä¶, NULL, envp)
–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º (varargs).
–û—Å—Ç–∞–Ω–Ω—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî envp: –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º –ø—Ä–æ—Ü–µ—Å—É.
–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É.

execle("/bin/cat", "cat", "03-2.c", NULL, envp);

2Ô∏è‚É£ execv(path, argv[])
–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –º–∞—Å–∏–≤–æ–º —Ä—è–¥–∫—ñ–≤ (argv[]).
–°–µ—Ä–µ–¥–æ–≤–∏—â–µ –ø—Ä–æ—Ü–µ—Å—É –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è; –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ.
–ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ env.

char *args[] = {"cat", "03-2.c", NULL};
execv("/bin/cat", args);

4Ô∏è‚É£ execve(path, argv[], envp[])
–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –º–∞—Å–∏–≤–æ–º —Ä—è–¥–∫—ñ–≤ (argv[]).
–°–µ—Ä–µ–¥–æ–≤–∏—â–µ –ø—Ä–æ—Ü–µ—Å—É –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ envp[], –º–æ–∂–Ω–∞ –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏.
–ü–æ—î–¥–Ω—É—î –∑—Ä—É—á–Ω—ñ—Å—Ç—å argv[] –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–∞–¥–∞–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ.

char *args[] = {"cat", "03-2.c", NULL};
execve("/bin/cat", args, envp);

üîπ –ö–æ—Ä–æ—Ç–∫–æ

